{
  "address": "0x66747eC6Eff8303368378a98C68d017464C41095",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x240fe351e26a7eaa63a3411d4ae256c7b41bd8eb55901df3ea14de721b7e9032",
  "receipt": {
    "to": null,
    "from": "0xCEb4f6dDc16116a4fA0C6f966026a2a90a397bea",
    "contractAddress": "0x66747eC6Eff8303368378a98C68d017464C41095",
    "transactionIndex": 127,
    "gasUsed": "991232",
    "logsBloom": "0x
    "blockHash": "0x0702671adfabd57fc156171bece4130b115d9117df26370b6841e37581b48932",
    "transactionHash": "0x240fe351e26a7eaa63a3411d4ae256c7b41bd8eb55901df3ea14de721b7e9032",
    "logs": [],
    "blockNumber": 7903723,
    "cumulativeGasUsed": "15635245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "d0cd19bf8fa95e2a54bb9e5f4918285f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"funder\":\"The address of the funder\"},\"returns\":{\"_0\":\"uint256 The amount funded by the funder\"}},\"getFunder(uint256)\":{\"params\":{\"index\":\"The index of the funder\"},\"returns\":{\"_0\":\"address The address of the funder\"}},\"getPriceFeed()\":{\"returns\":{\"_0\":\"AggregatorV3Interface The price feed used in the contract\"}}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cheaperWithdraw()\":{\"notice\":\"This function withdraw funds (cheaper) as it loads funders into the memory\"},\"fund()\":{\"notice\":\"This function funds this contract\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"This function returns the amount funded by an address\"},\"getFunder(uint256)\":{\"notice\":\"This function is a getter of the funder address\"},\"getOwner()\":{\"notice\":\"This function is a getter of the owner address\"},\"getPriceFeed()\":{\"notice\":\"This function returns the price feed used in the contract\"},\"withdraw()\":{\"notice\":\"This function withdraw funds\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n *  @title A contract for crowd funding\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n\\tusing PriceConverter for uint256;\\n\\n\\t// Public State Variables\\n\\tuint256 public constant MINIMUM_USD = 5 * 10**18;\\n\\n\\t// Private State Variables\\n\\tAggregatorV3Interface private s_priceFeed;\\n\\taddress[] private s_funders;\\n\\taddress private immutable i_owner;\\n\\tmapping(address => uint256) private s_addressToAmountFunded;\\n\\n\\tmodifier onlyOwner() {\\n\\t\\t// require(msg.sender == owner);\\n\\t\\tif (msg.sender != i_owner) revert FundMe__NotOwner();\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address priceFeedAddress) {\\n\\t\\ti_owner = msg.sender;\\n\\t\\ts_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tfund();\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tfund();\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function funds this contract\\n\\t */\\n\\tfunction fund() public payable {\\n\\t\\trequire(\\n\\t\\t\\tmsg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n\\t\\t\\t\\\"You need to spend more ETH!\\\"\\n\\t\\t);\\n\\t\\ts_addressToAmountFunded[msg.sender] += msg.value;\\n\\t\\ts_funders.push(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function withdraw funds\\n\\t */\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\tfor (\\n\\t\\t\\tuint256 funderIndex = 0;\\n\\t\\t\\tfunderIndex < s_funders.length;\\n\\t\\t\\tfunderIndex++\\n\\t\\t) {\\n\\t\\t\\taddress funder = s_funders[funderIndex];\\n\\t\\t\\ts_addressToAmountFunded[funder] = 0;\\n\\t\\t}\\n\\n\\t\\ts_funders = new address[](0);\\n\\n\\t\\t// method 1: transfer\\n\\t\\t// payable(msg.sender).transfer(address(this).balance);\\n\\n\\t\\t// method 2: send\\n\\t\\t// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n\\t\\t// require(sendSuccess, \\\"Send failed\\\");\\n\\n\\t\\t// method 3 (preferred): call\\n\\t\\t(bool callSuccess, ) = payable(msg.sender).call{\\n\\t\\t\\tvalue: address(this).balance\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(callSuccess, \\\"Call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function withdraw funds (cheaper) as it loads funders into the memory\\n\\t */\\n\\tfunction cheaperWithdraw() public payable onlyOwner {\\n\\t\\taddress[] memory funders = s_funders;\\n\\t\\tfor (\\n\\t\\t\\tuint256 funderIndex = 0;\\n\\t\\t\\tfunderIndex < funders.length;\\n\\t\\t\\tfunderIndex++\\n\\t\\t) {\\n\\t\\t\\taddress funder = funders[funderIndex];\\n\\t\\t\\ts_addressToAmountFunded[funder] = 0;\\n\\t\\t}\\n\\t\\ts_funders = new address[](0);\\n\\t\\t(bool callSuccess, ) = payable(msg.sender).call{\\n\\t\\t\\tvalue: address(this).balance\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(callSuccess, \\\"Call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function is a getter of the owner address\\n\\t */\\n\\tfunction getOwner() public view returns (address) {\\n\\t\\treturn i_owner;\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function is a getter of the funder address\\n\\t *  @param index The index of the funder\\n\\t *  @return address The address of the funder\\n\\t */\\n\\tfunction getFunder(uint256 index) public view returns (address) {\\n\\t\\treturn s_funders[index];\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function returns the amount funded by an address\\n\\t *  @param funder The address of the funder\\n\\t *  @return uint256 The amount funded by the funder\\n\\t */\\n\\tfunction getAddressToAmountFunded(address funder)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn s_addressToAmountFunded[funder];\\n\\t}\\n\\n\\t/**\\n\\t *  @notice This function returns the price feed used in the contract\\n\\t *  @return AggregatorV3Interface The price feed used in the contract\\n\\t */\\n\\tfunction getPriceFeed() public view returns (AggregatorV3Interface) {\\n\\t\\treturn s_priceFeed;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa5c50942a63afe9f27a7c77007fbe59cc2f449e7f89e4b4a1d7fa6d9c16761ac\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n\\t// We could make this public, but then we'd have to deploy it\\n\\tfunction getPrice(AggregatorV3Interface priceFeed)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Goerli ETH / USD Address\\n\\t\\t// https://docs.chain.link/docs/ethereum-addresses/\\n\\t\\t// AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n\\t\\t//     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\t\\t// );\\n\\n\\t\\t(, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\t\\t// ETH/USD rate in 18 digit\\n\\t\\treturn uint256(answer * 10000000000);\\n\\t\\t// or (Both will do the same thing)\\n\\t\\t// return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n\\t}\\n\\n\\t// 1000000000\\n\\tfunction getConversionRate(\\n\\t\\tuint256 ethAmount,\\n\\t\\tAggregatorV3Interface priceFeed\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 ethPrice = getPrice(priceFeed);\\n\\t\\tuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n\\t\\t// or (Both will do the same thing)\\n\\t\\t// uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n\\t\\t// the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n\\t\\treturn ethAmountInUsd;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd1890f67489072493f858eb0112ee2607abd730e2901a946ec7e421afc5fd9b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012073803806200120783398181016040528101906200003791906200011c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b600060208284031215620001355762000134620000b2565b5b6000620001458482850162000105565b91505092915050565b60805161108f62000178600039600081816103410152818161059001526105df015261108f6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa1565b6102f6565b6040516100cc9190610ae7565b60405180910390f35b3480156100e157600080fd5b506100ea61033f565b005b3480156100f857600080fd5b50610101610580565b60405161010e9190610ae7565b60405180910390f35b34801561012357600080fd5b5061012c61058c565b6040516101399190610b11565b60405180910390f35b34801561014e57600080fd5b506101576105b4565b6040516101649190610b8b565b60405180910390f35b6101756101be565b005b61017f6105dd565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bd2565b610882565b6040516101b59190610b11565b60405180910390f35b674563918244f400006101fa60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ca90919063ffffffff16565b101561023b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023290610c5c565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028a9190610cab565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610470576000600182815481106103ea576103e9610cdf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046890610d0e565b9150506103c7565b50600067ffffffffffffffff81111561048c5761048b610d56565b5b6040519080825280602002602001820160405280156104ba5781602001602082028036833780820191505090505b50600190805190602001906104d0929190610997565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f790610db6565b60006040518083038185875af1925050503d8060008114610534576040519150601f19603f3d011682016040523d82523d6000602084013e610539565b606091505b505090508061057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e17565b60405180910390fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610662576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069c575b5050505050905060005b815181101561077157600082828151811061070e5761070d610cdf565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076990610d0e565b9150506106f0565b50600067ffffffffffffffff81111561078d5761078c610d56565b5b6040519080825280602002602001820160405280156107bb5781602001602082028036833780820191505090505b50600190805190602001906107d1929190610997565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f890610db6565b60006040518083038185875af1925050503d8060008114610835576040519150601f19603f3d011682016040523d82523d6000602084013e61083a565b606091505b505090508061087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590610e17565b60405180910390fd5b5050565b60006001828154811061089857610897610cdf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d683610906565b90506000670de0b6b3a764000085836108ef9190610e37565b6108f99190610ea8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190610f66565b5050509150506402540be4008161098f9190610fe1565b915050919050565b828054828255906000526020600020908101928215610a10579160200282015b82811115610a0f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b7565b5b509050610a1d9190610a21565b5090565b5b80821115610a3a576000816000905550600101610a22565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6e82610a43565b9050919050565b610a7e81610a63565b8114610a8957600080fd5b50565b600081359050610a9b81610a75565b92915050565b600060208284031215610ab757610ab6610a3e565b5b6000610ac584828501610a8c565b91505092915050565b6000819050919050565b610ae181610ace565b82525050565b6000602082019050610afc6000830184610ad8565b92915050565b610b0b81610a63565b82525050565b6000602082019050610b266000830184610b02565b92915050565b6000819050919050565b6000610b51610b4c610b4784610a43565b610b2c565b610a43565b9050919050565b6000610b6382610b36565b9050919050565b6000610b7582610b58565b9050919050565b610b8581610b6a565b82525050565b6000602082019050610ba06000830184610b7c565b92915050565b610baf81610ace565b8114610bba57600080fd5b50565b600081359050610bcc81610ba6565b92915050565b600060208284031215610be857610be7610a3e565b5b6000610bf684828501610bbd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c46601b83610bff565b9150610c5182610c10565b602082019050919050565b60006020820190508181036000830152610c7581610c39565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb682610ace565b9150610cc183610ace565b9250828201905080821115610cd957610cd8610c7c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d1982610ace565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4b57610d4a610c7c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610da0600083610d85565b9150610dab82610d90565b600082019050919050565b6000610dc182610d93565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e01600b83610bff565b9150610e0c82610dcb565b602082019050919050565b60006020820190508181036000830152610e3081610df4565b9050919050565b6000610e4282610ace565b9150610e4d83610ace565b9250828202610e5b81610ace565b91508282048414831517610e7257610e71610c7c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eb382610ace565b9150610ebe83610ace565b925082610ece57610ecd610e79565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef881610ed9565b8114610f0357600080fd5b50565b600081519050610f1581610eef565b92915050565b6000819050919050565b610f2e81610f1b565b8114610f3957600080fd5b50565b600081519050610f4b81610f25565b92915050565b600081519050610f6081610ba6565b92915050565b600080600080600060a08688031215610f8257610f81610a3e565b5b6000610f9088828901610f06565b9550506020610fa188828901610f3c565b9450506040610fb288828901610f51565b9350506060610fc388828901610f51565b9250506080610fd488828901610f06565b9150509295509295909350565b6000610fec82610f1b565b9150610ff783610f1b565b925082820261100581610f1b565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561103d5761103c610c7c565b5b828205841483151761105257611051610c7c565b5b509291505056fea26469706673582212207e2a208f326e72dbba3c633d5a8b0133760a32cf26b469018d4fbf8067142ad464736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa1565b6102f6565b6040516100cc9190610ae7565b60405180910390f35b3480156100e157600080fd5b506100ea61033f565b005b3480156100f857600080fd5b50610101610580565b60405161010e9190610ae7565b60405180910390f35b34801561012357600080fd5b5061012c61058c565b6040516101399190610b11565b60405180910390f35b34801561014e57600080fd5b506101576105b4565b6040516101649190610b8b565b60405180910390f35b6101756101be565b005b61017f6105dd565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bd2565b610882565b6040516101b59190610b11565b60405180910390f35b674563918244f400006101fa60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ca90919063ffffffff16565b101561023b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023290610c5c565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028a9190610cab565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610470576000600182815481106103ea576103e9610cdf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046890610d0e565b9150506103c7565b50600067ffffffffffffffff81111561048c5761048b610d56565b5b6040519080825280602002602001820160405280156104ba5781602001602082028036833780820191505090505b50600190805190602001906104d0929190610997565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f790610db6565b60006040518083038185875af1925050503d8060008114610534576040519150601f19603f3d011682016040523d82523d6000602084013e610539565b606091505b505090508061057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e17565b60405180910390fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610662576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069c575b5050505050905060005b815181101561077157600082828151811061070e5761070d610cdf565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076990610d0e565b9150506106f0565b50600067ffffffffffffffff81111561078d5761078c610d56565b5b6040519080825280602002602001820160405280156107bb5781602001602082028036833780820191505090505b50600190805190602001906107d1929190610997565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f890610db6565b60006040518083038185875af1925050503d8060008114610835576040519150601f19603f3d011682016040523d82523d6000602084013e61083a565b606091505b505090508061087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590610e17565b60405180910390fd5b5050565b60006001828154811061089857610897610cdf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d683610906565b90506000670de0b6b3a764000085836108ef9190610e37565b6108f99190610ea8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109789190610f66565b5050509150506402540be4008161098f9190610fe1565b915050919050565b828054828255906000526020600020908101928215610a10579160200282015b82811115610a0f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b7565b5b509050610a1d9190610a21565b5090565b5b80821115610a3a576000816000905550600101610a22565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6e82610a43565b9050919050565b610a7e81610a63565b8114610a8957600080fd5b50565b600081359050610a9b81610a75565b92915050565b600060208284031215610ab757610ab6610a3e565b5b6000610ac584828501610a8c565b91505092915050565b6000819050919050565b610ae181610ace565b82525050565b6000602082019050610afc6000830184610ad8565b92915050565b610b0b81610a63565b82525050565b6000602082019050610b266000830184610b02565b92915050565b6000819050919050565b6000610b51610b4c610b4784610a43565b610b2c565b610a43565b9050919050565b6000610b6382610b36565b9050919050565b6000610b7582610b58565b9050919050565b610b8581610b6a565b82525050565b6000602082019050610ba06000830184610b7c565b92915050565b610baf81610ace565b8114610bba57600080fd5b50565b600081359050610bcc81610ba6565b92915050565b600060208284031215610be857610be7610a3e565b5b6000610bf684828501610bbd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c46601b83610bff565b9150610c5182610c10565b602082019050919050565b60006020820190508181036000830152610c7581610c39565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb682610ace565b9150610cc183610ace565b9250828201905080821115610cd957610cd8610c7c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d1982610ace565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4b57610d4a610c7c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610da0600083610d85565b9150610dab82610d90565b600082019050919050565b6000610dc182610d93565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e01600b83610bff565b9150610e0c82610dcb565b602082019050919050565b60006020820190508181036000830152610e3081610df4565b9050919050565b6000610e4282610ace565b9150610e4d83610ace565b9250828202610e5b81610ace565b91508282048414831517610e7257610e71610c7c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eb382610ace565b9150610ebe83610ace565b925082610ece57610ecd610e79565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef881610ed9565b8114610f0357600080fd5b50565b600081519050610f1581610eef565b92915050565b6000819050919050565b610f2e81610f1b565b8114610f3957600080fd5b50565b600081519050610f4b81610f25565b92915050565b600081519050610f6081610ba6565b92915050565b600080600080600060a08688031215610f8257610f81610a3e565b5b6000610f9088828901610f06565b9550506020610fa188828901610f3c565b9450506040610fb288828901610f51565b9350506060610fc388828901610f51565b9250506080610fd488828901610f06565b9150509295509295909350565b6000610fec82610f1b565b9150610ff783610f1b565b925082820261100581610f1b565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561103d5761103c610c7c565b5b828205841483151761105257611051610c7c565b5b509291505056fea26469706673582212207e2a208f326e72dbba3c633d5a8b0133760a32cf26b469018d4fbf8067142ad464736f6c63430008110033",
  "devdoc": {
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "funder": "The address of the funder"
        },
        "returns": {
          "_0": "uint256 The amount funded by the funder"
        }
      },
      "getFunder(uint256)": {
        "params": {
          "index": "The index of the funder"
        },
        "returns": {
          "_0": "address The address of the funder"
        }
      },
      "getPriceFeed()": {
        "returns": {
          "_0": "AggregatorV3Interface The price feed used in the contract"
        }
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cheaperWithdraw()": {
        "notice": "This function withdraw funds (cheaper) as it loads funders into the memory"
      },
      "fund()": {
        "notice": "This function funds this contract"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "This function returns the amount funded by an address"
      },
      "getFunder(uint256)": {
        "notice": "This function is a getter of the funder address"
      },
      "getOwner()": {
        "notice": "This function is a getter of the owner address"
      },
      "getPriceFeed()": {
        "notice": "This function returns the price feed used in the contract"
      },
      "withdraw()": {
        "notice": "This function withdraw funds"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}